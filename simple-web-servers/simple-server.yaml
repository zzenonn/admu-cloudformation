AWSTemplateFormatVersion: "2010-09-09"
Description: >
  This template is for provisioning of
  any resource that uses instances such as
  EC2 and RDS
Parameters:
  ProjectName:
    Description: Project Name to identify stack and infrastructure
    Type: String
    Default: MongoDb
  Environment:
    Description: Environment to deploy the Stack
    Type: String
    Default: Dev
    AllowedValues:
      - Stage
      - Prod
      - Test
      - Dev
  KeyPair:
    Description: Key used to SSH into the instance.
    Type: AWS::EC2::KeyPair::KeyName
  LatestAmazonLinuxAmiId:
    Type : 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
    
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Project Details
        Parameters:
          - ProjectName
          - Environment
      - Label:
          default: Server Details
        Parameters:
          - KeyPair
          - LatestAmazonLinuxAmiId

    ParameterLabels:
      ProjectName:
        default: Project Name
      Environment:
        default: Environment
      KeyPair:
        default: SSH Key Pair

Resources:
      
  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Sub ${ProjectName}-${Environment}-InstanceSg
      GroupDescription: Allow MongoDB access only from within the security group
      
  SgInstanceIngress1:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !GetAtt InstanceSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: "0.0.0.0/0"

  SgInstanceIngress2:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !GetAtt InstanceSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !GetAtt InstanceSecurityGroup.GroupId

  # BastionRole:
  #   Type: AWS::IAM::Role
  #   Properties: 
  #     AssumeRolePolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #       - Effect: Allow
  #         Principal:
  #           Service:
  #           - ec2.amazonaws.com
  #         Action:
  #         - sts:AssumeRole
  #     Path: !Sub /${ProjectName}/instances/
  #     ManagedPolicyArns:
  #       - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM

  # DevEnvironment:
  #   Type: AWS::Cloud9::EnvironmentEC2
  #   Properties: 
  #     AutomaticStopTimeMinutes: 120
  #     Description: "Development IDE for Cloud 9"
  #     ImageId: "ubuntu-18.04-x86_64"
  #     InstanceType: "t2.micro"
  #     Name: "DevEnvironment"


  BastionInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Roles:
        - LabRole
  BastionHost: 
    Type: "AWS::EC2::Instance"
    Properties: 
      ImageId: !Ref LatestAmazonLinuxAmiId
      KeyName: !Ref KeyPair
      InstanceType: t2.micro
      NetworkInterfaces: 
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          GroupSet: 
            - !GetAtt InstanceSecurityGroup.GroupId
          DeleteOnTermination: true
      IamInstanceProfile: !Ref BastionInstanceProfile
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-Server
        - Key: Environment
          Value: !Sub ${Environment}
            

Outputs:
  
  Ec2InstanceDns:
    Value: !GetAtt BastionHost.PublicDnsName

  Ec2InstancePrivateIp:
    Value: !GetAtt BastionHost.PrivateIp